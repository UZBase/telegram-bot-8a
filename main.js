const TelegramBot = require("node-telegram-bot-api")

const TOKEN = `2048632800:AAGCgjdxflFaSeheBmfts-7sSs44tUI8R78`
const bot = new TelegramBot(TOKEN, {
    polling: true,
    updates: {
        enabled: true,
        get_interval: 1000
    }
});
bot.on('message', async message => {
    const chatId = message.chat.id
    const name = message.from.first_name
    const text = message.text
    if (text == '/start' || text == 'start' || text == '–Ω–∞—á–∞—Ç—å') {
        const keyboard = {
            resize_keyboard: true,
            one_time_keyboard: true,
            keyboard: [
                [
                    {
                        text: `8 "–ê" –∫–ª–∞—Å—Å`
                    }
                ]
            ]
        }
        bot.sendMessage(chatId, `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>${name}</b>. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?`, {
            parse_mode: 'HTML',
            reply_markup: keyboard
        })
    } else if (text == '8 "–ê" –∫–ª–∞—Å—Å') {
        const keyboard = {
            resize_keyboard: true,
            one_time_keyboard: true,
            keyboard: [
                [
                    {
                        text: `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤`
                    },
                    {
                        text: `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤`
                    },
                    {
                        text: `–ù–∞ —Å—Ç–∞—Ä—Ç`
                    }
                ]
            ]
        }
        bot.sendMessage(chatId, `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –∏ –∑–≤–æ–Ω–∫–æ–≤! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ üëá`, {
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [
                    [
                        {
                            text: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤',
                            callback_data: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤"
                        }
                    ],
                    [
                        {
                            text: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤',
                            callback_data: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤"
                        }
                    ],
                    [
                        {
                            text: '–ù–∞ —Å—Ç–∞—Ä—Ç',
                            callback_data: "–ù–∞ —Å—Ç–∞—Ä—Ç"
                        }
                    ]
                ]
            }
        })
    } else if (text == `–ù–∞ —Å—Ç–∞—Ä—Ç`) {
        const keyboard = {
            resize_keyboard: true,
            one_time_keyboard: true,
            keyboard: [
                [
                    {
                        text: `8 "–ê" –∫–ª–∞—Å—Å`
                    }
                ]
            ]
        }
        bot.sendMessage(chatId, `<b>${name}</b>. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?`, {
            parse_mode: 'HTML',
            reply_markup: keyboard
        })
    } else if (text == `–ì–ª–∞–≤–Ω–æ–µ`) {
        const keyboard = {
            resize_keyboard: true,
            one_time_keyboard: true,
            keyboard: [
                [
                    {
                        text: `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤`
                    },
                    {
                        text: `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤`
                    },
                    {
                        text: `–ù–∞ —Å—Ç–∞—Ä—Ç`
                    }
                ]
            ]
        }

        bot.sendMessage(chatId, `–í—ã –≤—ã—à–ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?`, {
            parse_mode: 'HTML',
            reply_markup: keyboard
        })
    } else if (text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤') {
        const dayskeyboard = {
            resize_keyboard: true,
            one_time_keyboard: true,
            keyboard: [
                [
                    {
                        text: `1-—ã–π —É—Ä–æ–∫`
                    },
                    {
                        text: `2-–æ–π —É—Ä–æ–∫`
                    },
                    {
                        text: `3-–∏–π —É—Ä–æ–∫`
                    },
                ],
                [
                    {
                        text: `4-—ã–π —É—Ä–æ–∫`
                    },
                    {
                        text: `5-—ã–π —É—Ä–æ–∫`
                    },
                    {
                        text: `6-–æ–π —É—Ä–æ–∫`
                    },
                ],
                [
                    {
                        text: `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –ø—è—Ç–Ω–∏—Ü–∞`
                    },
                ],
                [
                    {
                        text: `–ì–ª–∞–≤–Ω–æ–µ`
                    }
                ]
            ]
        }
        bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫`, {
            parse_mode: 'HTML',
            reply_markup: dayskeyboard
        })
    } else if (text == '1-—ã–π —É—Ä–æ–∫') {
        await bot.sendPhoto(
            message.chat.id,
            'images/1.jpg', {
            caption: `1-—ã–π —É—Ä–æ–∫\n\n–ù–∞—á–∞–ª–æ: 08:00 \n–ö–æ–Ω–µ—Ü: 08:45`
        })
    } else if (text == '2-–æ–π —É—Ä–æ–∫') {
        await bot.sendPhoto(
            message.chat.id,
            'images/2.jpg', {
            caption: `2-—ã–π —É—Ä–æ–∫\n\n–ù–∞—á–∞–ª–æ: 08:50 \n–ö–æ–Ω–µ—Ü: 09:35`
        })
    } else if (text == '3-–∏–π —É—Ä–æ–∫') {
        await bot.sendPhoto(
            message.chat.id,
            'images/3.jpg', {
            caption: `3-–∏–π —É—Ä–æ–∫\n\n–ù–∞—á–∞–ª–æ: 09:40 \n–ö–æ–Ω–µ—Ü: 10:25`
        })

    } else if (text == '4-—ã–π —É—Ä–æ–∫') {
        await bot.sendPhoto(
            message.chat.id,
            'images/4.jpg', {
            caption: `4-—ã–π —É—Ä–æ–∫\n\n–ù–∞—á–∞–ª–æ: 10:35 \n–ö–æ–Ω–µ—Ü: 11:20`
        })
    } else if (text == '5-—ã–π —É—Ä–æ–∫') {
        await bot.sendPhoto(
            message.chat.id,
            'images/5.jpg', {
            caption: `5-—ã–π —É—Ä–æ–∫\n\n–ù–∞—á–∞–ª–æ: 11:30 \n–ö–æ–Ω–µ—Ü: 12:15`
        })
    } else if (text == '6-–æ–π —É—Ä–æ–∫') {
        await bot.sendPhoto(
            message.chat.id,
            'images/6.jpg', {
            caption: `6-–æ–π —É—Ä–æ–∫\n\n–ù–∞—á–∞–ª–æ: 12:20 \n–ö–æ–Ω–µ—Ü: 13:05`
        })
    } else if (text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –ø—è—Ç–Ω–∏—Ü–∞') {
        const dayskeyboard = {
            resize_keyboard: true,
            one_time_keyboard: true,
            keyboard: [
                [
                    {
                        text: `1-—ã–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞`
                    },
                    {
                        text: `2-–æ–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞`
                    },
                    {
                        text: `3-–∏–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞`
                    },
                ],
                [
                    {
                        text: `4-—ã–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞`
                    },
                    {
                        text: `5-—ã–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞`
                    },
                    {
                        text: `6-–æ–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞`
                    },
                    {
                        text: `7-–æ–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞`
                    },
                ],
                [
                    {
                        text: `–ì–ª–∞–≤–Ω–æ–µ`
                    }
                ]
            ]
        }
        bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫ (–ø—è—Ç–Ω–∏—Ü–∞)`, {
            parse_mode: 'HTML',
            reply_markup: dayskeyboard
        })
    } else if (text == '1-—ã–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞') {
        await bot.sendPhoto(
            message.chat.id,
            'images/1-s.jpg', {
            caption: `1-—ã–π —É—Ä–æ–∫\n\n–ù–∞—á–∞–ª–æ: 08:00 \n–ö–æ–Ω–µ—Ü: 08:30`
        })
    } else if (text == '2-–æ–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞') {
        await bot.sendPhoto(
            message.chat.id,
            'images/2-s.jpg', {
            caption: `2-—ã–π —É—Ä–æ–∫\n\n–ù–∞—á–∞–ª–æ: 08:35 \n–ö–æ–Ω–µ—Ü: 09:15`
        })
    } else if (text == '3-–∏–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞') {
        await bot.sendPhoto(
            message.chat.id,
            'images/3-s.jpg', {
            caption: `3-–∏–π —É—Ä–æ–∫\n\n–ù–∞—á–∞–ª–æ: 09:20 \n–ö–æ–Ω–µ—Ü: 10:00`
        })
    } else if (text == '4-—ã–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞') {
        await bot.sendPhoto(
            message.chat.id,
            'images/4-s.jpg', {
            caption: `4-—ã–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞\n\n–ù–∞—á–∞–ª–æ: 10:05 \n–ö–æ–Ω–µ—Ü: 10:45`
        })
    } else if (text == '5-—ã–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞') {
        await bot.sendPhoto(
            message.chat.id,
            'images/5-s.jpg', {
            caption: `5-—ã–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞\n\n–ù–∞—á–∞–ª–æ: 10:55 \n–ö–æ–Ω–µ—Ü: 11:35`
        })
    } else if (text == '6-–æ–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞') {
        await bot.sendPhoto(
            message.chat.id,
            'images/6-s.jpg', {
            caption: `6-–æ–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞\n\n–ù–∞—á–∞–ª–æ: 11:40 \n–ö–æ–Ω–µ—Ü: 12:20`
        })
    } else if (text == '7-–æ–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞') {
        await bot.sendPhoto(
            message.chat.id,
            'images/7-s.jpg', {
            caption: `7-–æ–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞\n\n–ù–∞—á–∞–ª–æ: 12:25 \n–ö–æ–Ω–µ—Ü: 13:05`
        })
    }
})
bot.on('callback_query', async query => {
    const { chat, message_id, text } = query.message
    switch (query.data) {
        case '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤':
            bot.deleteMessage(chat.id, message_id)
            const dayskeyboard = {
                resize_keyboard: true,
                one_time_keyboard: true,
                keyboard: [
                    [
                        {
                            text: `–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫`
                        },
                        {
                            text: `–í—Ç–æ—Ä–Ω–∏–∫`
                        },
                        {
                            text: `–°—Ä–µ–¥–∞`
                        },
                    ],
                    [
                        {
                            text: `–ß–µ—Ç–≤–µ—Ä–≥`
                        },
                        {
                            text: `–ü—è—Ç–Ω–∏—Ü–∞`
                        },
                        {
                            text: `–°—É–±–±–æ—Ç–∞`
                        },
                    ],
                    [
                        {
                            text: `–ì–ª–∞–≤–Ω–æ–µ`
                        }
                    ]
                ]
            }
            bot.sendMessage(chat.id, `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏`, {
                parse_mode: 'HTML',
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                                callback_data: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤"
                            }
                        ],
                        [
                            {
                                text: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤',
                                callback_data: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤"
                            }
                        ],
                        [
                            {
                                text: '–ù–∞ —Å—Ç–∞—Ä—Ç',
                                callback_data: "–ù–∞ —Å—Ç–∞—Ä—Ç"
                            }
                        ]
                    ]
                }
            })

            if (text == `–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫`) {
                await bot.sendPhoto(
                    message.chat.id,
                    'images/Monday.jpg', {
                    caption: `–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: \n\n1. –ê–Ω–≥–ª.—è–∑ \n2. –ò—Å—Ç–æ—Ä–∏—è \n3. –ë–∏–æ–ª–æ–≥–∏—è \n4. –ê–ª–≥–µ–±—Ä–∞ \n5. –ì–µ–æ–≥—Ä–∞—Ñ–∏—è \n6. –†—É—Å—Å–∫–∏–π.—è–∑`
                }
                );
            } else if (text == `–í—Ç–æ—Ä–Ω–∏–∫`) {
                await bot.sendPhoto(
                    message.chat.id,
                    'images/Tuesday.jpg', {
                    caption: `–í—Ç–æ—Ä–Ω–∏–∫: \n\n1. –•–∏–º–∏—è \n2. –ò—Å—Ç–æ—Ä–∏—è \n3. –ì–æ—Å.–ø—Ä–∞–≤–æ \n4. –ì–µ–æ–º–µ—Ç—Ä–∏—è \n5. –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ \n6. –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞`
                })
            } else if (text == `–°—Ä–µ–¥–∞`) {
                await bot.sendPhoto(
                    message.chat.id,
                    'images/Wednesday.jpg', {
                    caption: `–°—Ä–µ–¥–∞: \n\n1. –ê–Ω–≥–ª.—è–∑ \n2. –ê–ª–≥–µ–±—Ä–∞ \n3. –¢–µ—Ö–Ω–∞–ª–æ–≥–∏—è \n4. –£–∑–±–µ–∫—Å–∫–∏–π.—è–∑ \n5. –ì–µ–æ–≥—Ä–∞—Ñ–∏—è \n6. –†—É—Å—Å–∫–∏–π.—è–∑`
                })
            } else if (text == `–ß–µ—Ç–≤–µ—Ä–≥`) {
                await bot.sendPhoto(
                    message.chat.id,
                    'images/Thursday.jpg', {
                    caption: `–ß–µ—Ç–≤–µ—Ä–≥: \n\n1. –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞ \n2. –ò—Å—Ç–æ—Ä–∏—è \n3. –ë–∏–æ–ª–æ–≥–∏—è \n4. –£–∑–±–µ–∫—Å–∫–∏–π.—è–∑ \n5. –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ \n6. –†—É—Å—Å–∫–∏–π.—è–∑`
                })
            } else if (text == `–ü—è—Ç–Ω–∏—Ü–∞`) {
                await bot.sendPhoto(
                    message.chat.id,
                    'images/Friday.jpg', {
                    caption: `–ü—è—Ç–Ω–∏—Ü–∞: \n\n1. –ß–∞—Å.–¥—É—Ö. \n2. –ß–µ—Ä—á–µ–Ω–∏–µ \n3. –í–æ—Å–ø–∏—Ç–∞–Ω–∏–µ \n4. –ê–ª–≥–µ–±—Ä–∞ \n5. –§–∏–∑–∏–∫–∞ \n6. –•–∏–º–∏—è \n7. –ê–Ω–≥–ª.—è–∑`
                })
            } else if (text == `–°—É–±–±–æ—Ç–∞`) {
                await bot.sendPhoto(
                    message.chat.id,
                    'images/Saturday.jpg', {
                    caption: `–°—É–±–±–æ—Ç–∞: \n\n1. –≠–∫–∞–Ω–æ–º–∏–∫–∞ \n2. –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞ \n3. –£–∑–±–µ–∫—Å–∫–∏–π.—è–∑ \n4. –ê–ª–≥–µ–±—Ä–∞`
                })
            }

    }
})