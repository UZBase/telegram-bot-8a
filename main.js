const TelegramBot = require("node-telegram-bot-api");
const TOKEN = "2048632800:AAGCgjdxflFaSeheBmfts-7sSs44tUI8R78";
const bot = new TelegramBot(TOKEN, {
  polling: true,
  updates: {
    enabled: true,
    get_interval: 1000,
  },
});
const start = () => {
  bot.on("message", async (message) => {
    const { chat, message_id } = message;
    const chatId = message.chat.id;
    const name = message.from.first_name;
    const text = message.text;
    const lastname = message.from.last_name;
    const id = message.from.id;
    const username = message.from.username;
    if (text == "/info" || text == "/info@Your_diary_Robot") {
      bot.getUserProfilePhotos(id, 0, 1).then(function (data) {
        bot.sendPhoto(
          chatId,
          data.photos[0][0].file_id,
          {
            caption: `–í–∞—à–µ –∏–º—è : ${name}\n–í–∞—à–µ —Ñ–∞–º–∏–ª–∏—è : ${lastname}\n–í–∞—à ID : ${id}\n –í–∞—à user : @${username}\n`,
          },
          {
            reply_to_message_id: message_id,
          }
        );
      });
    } else if (
      text == "/start" ||
      text == "start" ||
      text == "–Ω–∞—á–∞—Ç—å" ||
      text == "/start@Your_diary_Robot"
    ) {
      bot.deleteMessage(chatId, message_id);
      await bot.sendSticker(
        chatId,
        "https://img-15.stickers.cloud/packs/e3980c2c-d2f4-45e8-a29a-59a33d329d8d/webp/23bedacc-21e0-4d6a-9e9a-2cfa7c2d5b0f.webp"
      );
      bot.sendMessage(
        chatId,
        `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ <b>${name}</b>. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: `8 "–ê" –∫–ª–∞—Å—Å`,
                  callback_data: `8 "–ê" –∫–ª–∞—Å—Å`,
                },
              ],
            ],
          },
        }
      );
    } else if (text == '8 "–ê" –∫–ª–∞—Å—Å') {
      bot.sendMessage(
        chatId,
        `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –∏ –∑–≤–æ–Ω–∫–æ–≤! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ üëá`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤",
                  callback_data: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤",
                },
              ],
              [
                {
                  text: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤",
                  callback_data: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤",
                },
              ],
              [
                {
                  text: "–ù–∞ —Å—Ç–∞—Ä—Ç",
                  callback_data: "–ù–∞ —Å—Ç–∞—Ä—Ç",
                },
              ],
            ],
          },
        }
      );
    } else if (text == `–ù–∞ —Å—Ç–∞—Ä—Ç`) {
      const keyboard = {
        resize_keyboard: true,
        one_time_keyboard: true,
        keyboard: [
          [
            {
              text: `8 "–ê" –∫–ª–∞—Å—Å`,
            },
          ],
        ],
      };
      bot.sendMessage(chatId, `<b>${name}</b>. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?`, {
        parse_mode: "HTML",
        reply_markup: keyboard,
      });
    } else if (text == `–ì–ª–∞–≤–Ω–æ–µ`) {
      bot.sendMessage(
        chatId,
        `–í—ã –≤—ã—à–ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤",
                  callback_data: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤",
                },
              ],
              [
                {
                  text: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤",
                  callback_data: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤",
                },
              ],
              [
                {
                  text: "–ù–∞ —Å—Ç–∞—Ä—Ç",
                  callback_data: "–ù–∞ —Å—Ç–∞—Ä—Ç",
                },
              ],
            ],
          },
        }
      );
    } else if (text == "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤") {
      const dayskeyboard = {
        resize_keyboard: true,
        one_time_keyboard: true,
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "1-—ã–π —É—Ä–æ–∫",
                callback_data: "1-—ã–π —É—Ä–æ–∫",
              },
            ],
            [
              {
                text: "2-—ã–π —É—Ä–æ–∫",
                callback_data: "2-—ã–π —É—Ä–æ–∫",
              },
            ],
            [
              {
                text: `3-–∏–π —É—Ä–æ–∫`,
                callback_data: "3-–∏–π —É—Ä–æ–∫",
              },
            ],
            [
              {
                text: `4-—ã–π —É—Ä–æ–∫`,
                callback_data: "4-—ã–π —É—Ä–æ–∫",
              },
            ],
            [
              {
                text: `5-—ã–π —É—Ä–æ–∫`,
                callback_data: "5-—ã–π —É—Ä–æ–∫",
              },
            ],
            [
              {
                text: `6-–æ–π —É—Ä–æ–∫`,
                callback_data: "6-–æ–π —É—Ä–æ–∫",
              },
            ],
            [
              {
                text: `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –ø—è—Ç–Ω–∏—Ü–∞`,
                callback_data: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –ø—è—Ç–Ω–∏—Ü–∞",
              },
            ],
            [
              {
                text: `–ì–ª–∞–≤–Ω–æ–µ`,
                callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
              },
            ],
          ],
        },
      };
      bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫`, {
        parse_mode: "HTML",
        reply_markup: dayskeyboard,
      });
    } else if (text == "cls" ||
      text == "clear" ||
      text == "/cls" ||
      text == "/cls@Your_diary_Robot"
    ) {
      for (let i = 0; i < 301; i++)
        bot
          .deleteMessage(message.chat.id, message.message_id - i)
          .catch((er) => {
            return;
          });
    } else if (text == "/admins@Your_diary_Robot" || text == "/admins") {
      bot.getChatAdministrators(chatId).then((data) => {
        const chatId = message.chat.id;
        const { chat, message_id } = message;
        // console.log(data);
        // bot.sendMessage(
        //   chatId,
        //   `–ò–º—è : ${data[4].user.first_name}\nId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è : ${data[4].user.id}\n–°—Ç–∞—Ç—É—Å : ${data[4].status}\n–ë–æ—Ç : ${data[4].user.is_bot}\n–í–∫–ª—é—á—ë–ª –ª–∏ —Ä–µ–∂–∏–º –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å : ${data[4].is_anonymous}`
        // );
        for (let a = 0; a < 4; a++) {
          const admin_name = data[a].user.first_name;
          const admin_id = data[a].user.id;
          const admin_status = data[a].status;
          const admin_is_bot = data[a].user.is_bot;
          bot.getUserProfilePhotos(admin_id, 0, 0).then(function (photos) {
            bot.sendPhoto(
              chatId,
              photos.photos[0][0].file_id,
              {
                caption: `–ò–º—è : ${admin_name}\nId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è : ${admin_id}\n–°—Ç–∞—Ç—É—Å : ${admin_status}\n–ë–æ—Ç : ${admin_is_bot}\n`,
              },
              {
                reply_to_message_id: message_id,
              }
            );
          });
        }
      });
    }
  });
  bot.on("callback_query", async (query) => {
    const { chat, message_id, text } = query.message;
    switch (query.data) {
      case "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤":
        bot.deleteMessage(chat.id, message_id);
        bot.sendMessage(chat.id, `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏`, {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                  callback_data: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                },
              ],
              [
                {
                  text: "–í—Ç–æ—Ä–Ω–∏–∫",
                  callback_data: "–í—Ç–æ—Ä–Ω–∏–∫",
                },
              ],
              [
                {
                  text: "–°—Ä–µ–¥–∞",
                  callback_data: "–°—Ä–µ–¥–∞",
                },
              ],
              [
                {
                  text: "–ß–µ—Ç–≤–µ—Ä–≥",
                  callback_data: "–ß–µ—Ç–≤–µ—Ä–≥",
                },
              ],
              [
                {
                  text: "–ü—è—Ç–Ω–∏—Ü–∞",
                  callback_data: "–ü—è—Ç–Ω–∏—Ü–∞",
                },
              ],
              [
                {
                  text: "–°—É–±–±–æ—Ç–∞",
                  callback_data: "–°—É–±–±–æ—Ç–∞",
                },
              ],
              [
                {
                  text: `–ì–ª–∞–≤–Ω–æ–µ`,
                  callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                },
              ],
            ],
          },
        });
        break;
      case "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤":
        bot.deleteMessage(chat.id, message_id);
        bot.sendMessage(chat.id, `–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤–æ–Ω–∫–æ–≤`, {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "1-—ã–π —É—Ä–æ–∫",
                  callback_data: "1-—ã–π —É—Ä–æ–∫",
                },
              ],
              [
                {
                  text: "2-–æ–π —É—Ä–æ–∫",
                  callback_data: "2-–æ–π —É—Ä–æ–∫",
                },
              ],
              [
                {
                  text: "3-–∏–π —É—Ä–æ–∫",
                  callback_data: "3-–∏–π —É—Ä–æ–∫",
                },
              ],
              [
                {
                  text: "4-—ã–π —É—Ä–æ–∫",
                  callback_data: "4-—ã–π —É—Ä–æ–∫",
                },
              ],
              [
                {
                  text: "5-—ã–π —É—Ä–æ–∫",
                  callback_data: "5-—ã–π —É—Ä–æ–∫",
                },
              ],
              [
                {
                  text: "6-–æ–π —É—Ä–æ–∫",
                  callback_data: "6-–æ–π —É—Ä–æ–∫",
                },
              ],
              [
                {
                  text: `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –ø—è—Ç–Ω–∏—Ü–∞`,
                  callback_data: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –ø—è—Ç–Ω–∏—Ü–∞",
                },
              ],
              [
                {
                  text: `–ì–ª–∞–≤–Ω–æ–µ`,
                  callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                },
              ],
            ],
          },
        });
        break;
      case "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –ø—è—Ç–Ω–∏—Ü–∞":
        bot.deleteMessage(chat.id, message_id);
        bot.sendMessage(chat.id, `–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤–æ–Ω–∫–æ–≤ (–ø—è—Ç–Ω–∏—Ü–∞)`, {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "1-—ã–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞",
                  callback_data: "1-—ã–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞",
                },
              ],
              [
                {
                  text: "2-–æ–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞",
                  callback_data: "2-–æ–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞",
                },
              ],
              [
                {
                  text: "3-–∏–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞",
                  callback_data: "3-–∏–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞",
                },
              ],
              [
                {
                  text: "4-—ã–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞",
                  callback_data: "4-—ã–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞",
                },
              ],
              [
                {
                  text: "5-—ã–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞",
                  callback_data: "5-—ã–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞",
                },
              ],
              [
                {
                  text: "6-–æ–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞",
                  callback_data: "6-–æ–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞",
                },
              ],
              [
                {
                  text: `7-–æ–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞`,
                  callback_data: "7-–æ–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞",
                },
              ],
              [
                {
                  text: `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤`,
                  callback_data: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤",
                },
              ],
            ],
          },
        });
        break;
      case "–ì–ª–∞–≤–Ω–æ–µ":
        bot.deleteMessage(chat.id, message_id);
        bot.sendMessage(
          chat.id,
          `–í—ã –≤—ã—à–ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?`,
          {
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤",
                    callback_data: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤",
                  },
                ],
                [
                  {
                    text: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤",
                    callback_data: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤",
                  },
                ],
                [
                  {
                    text: "–ù–∞ —Å—Ç–∞—Ä—Ç",
                    callback_data: "–ù–∞ —Å—Ç–∞—Ä—Ç",
                  },
                ],
              ],
            },
          }
        );
        break;
      case "–ù–∞ —Å—Ç–∞—Ä—Ç":
        bot.deleteMessage(chat.id, message_id);
        bot.sendMessage(chat.id, `–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?`, {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: `8 "–ê" –∫–ª–∞—Å—Å`,
                  callback_data: `8 "–ê" –∫–ª–∞—Å—Å`,
                },
              ],
            ],
          },
        });
        break;
      case '8 "–ê" –∫–ª–∞—Å—Å':
        bot.deleteMessage(chat.id, message_id);
        bot.sendMessage(
          chat.id,
          `–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –∏ –∑–≤–æ–Ω–∫–æ–≤! –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ üëá`,
          {
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤",
                    callback_data: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤",
                  },
                ],
                [
                  {
                    text: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤",
                    callback_data: "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤",
                  },
                ],
                [
                  {
                    text: "–ù–∞ —Å—Ç–∞—Ä—Ç",
                    callback_data: "–ù–∞ —Å—Ç–∞—Ä—Ç",
                  },
                ],
              ],
            },
          }
        );
        break;
      case "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫":
        bot.deleteMessage(chat.id, message_id);
        await bot.sendPhoto(chat.id, "images/Monday.jpg", {
          caption: `–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: \n\n1. –ê–Ω–≥–ª.—è–∑ \n2. –ò—Å—Ç–æ—Ä–∏—è \n3. –ë–∏–æ–ª–æ–≥–∏—è \n4. –ê–ª–≥–µ–±—Ä–∞ \n5. –ì–µ–æ–≥—Ä–∞—Ñ–∏—è \n6. –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ - –†—É—Å—Å–∫–∏–π.—è–∑`,
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: `–ì–ª–∞–≤–Ω–æ–µ`,
                  callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                },
              ],
            ],
          },
        });
        break;
      case "–í—Ç–æ—Ä–Ω–∏–∫":
        bot.deleteMessage(chat.id, message_id);
        await bot.sendPhoto(chat.id, "images/Tuesday.jpg", {
          caption: `–í—Ç–æ—Ä–Ω–∏–∫: \n\n1. –•–∏–º–∏—è \n2. –ò—Å—Ç–æ—Ä–∏—è \n3. –ì–æ—Å.–ø—Ä–∞–≤–æ \n4. –ì–µ–æ–º–µ—Ç—Ä–∏—è \n5. –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ - –†—É—Å—Å–∫–∏–π.—è–∑ \n6. –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞`,
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: `–ì–ª–∞–≤–Ω–æ–µ`,
                  callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                },
              ],
            ],
          },
        });
        break;
      case "–°—Ä–µ–¥–∞":
        bot.deleteMessage(chat.id, message_id);
        await bot.sendPhoto(chat.id, "images/Wednesday.jpg", {
          caption: `–°—Ä–µ–¥–∞: \n\n1. –ê–Ω–≥–ª.—è–∑ \n2. –ê–ª–≥–µ–±—Ä–∞ \n3. –¢–µ—Ö–Ω–∞–ª–æ–≥–∏—è \n4. –£–∑–±–µ–∫—Å–∫–∏–π.—è–∑ \n5. –ì–µ–æ–≥—Ä–∞—Ñ–∏—è \n6. –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ - –†—É—Å—Å–∫–∏–π.—è–∑`,
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: `–ì–ª–∞–≤–Ω–æ–µ`,
                  callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                },
              ],
            ],
          },
        });
        break;
      case "–ß–µ—Ç–≤–µ—Ä–≥":
        bot.deleteMessage(chat.id, message_id),
          await bot.sendPhoto(chat.id, "images/Thursday.jpg", {
            caption: `–ß–µ—Ç–≤–µ—Ä–≥: \n\n1. –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞ \n2. –ò—Å—Ç–æ—Ä–∏—è \n3. –ë–∏–æ–ª–æ–≥–∏—è \n4. –£–∑–±–µ–∫—Å–∫–∏–π.—è–∑ \n5. –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ \n6. –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ - –†—É—Å—Å–∫–∏–π.—è–∑`,
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: `–ì–ª–∞–≤–Ω–æ–µ`,
                    callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                  },
                ],
              ],
            },
          });
        break;
      case "–ü—è—Ç–Ω–∏—Ü–∞":
        bot.deleteMessage(chat.id, message_id),
          await bot.sendPhoto(chat.id, "images/Friday.jpg", {
            caption: `–ü—è—Ç–Ω–∏—Ü–∞: \n\n1. –ß–∞—Å.–¥—É—Ö. \n2. –ß–µ—Ä—á–µ–Ω–∏–µ \n3. –í–æ—Å–ø–∏—Ç–∞–Ω–∏–µ \n4. –ê–ª–≥–µ–±—Ä–∞ \n5. –§–∏–∑–∏–∫–∞ \n6. –•–∏–º–∏—è \n7. –ê–Ω–≥–ª.—è–∑`,
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: `–ì–ª–∞–≤–Ω–æ–µ`,
                    callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                  },
                ],
              ],
            },
          });
        break;
      case "–°—É–±–±–æ—Ç–∞":
        bot.deleteMessage(chat.id, message_id),
          await bot.sendPhoto(chat.id, "images/Saturday.jpg", {
            caption: `–°—É–±–±–æ—Ç–∞: \n\n1. –≠–∫–∞–Ω–æ–º–∏–∫–∞ \n2. –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞ \n3. –£–∑–±–µ–∫—Å–∫–∏–π.—è–∑ \n4. –ê–ª–≥–µ–±—Ä–∞`,
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: `–ì–ª–∞–≤–Ω–æ–µ`,
                    callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                  },
                ],
              ],
            },
          });
        break;
      case "1-—ã–π —É—Ä–æ–∫":
        bot.deleteMessage(chat.id, message_id),
          await bot.sendPhoto(chat.id, "images/1.jpg", {
            caption: `1-—ã–π —É—Ä–æ–∫\n\n–ù–∞—á–∞–ª–æ: 08:00 \n–ö–æ–Ω–µ—Ü: 08:45`,
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: `–ì–ª–∞–≤–Ω–æ–µ`,
                    callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                  },
                ],
              ],
            },
          });
        break;
      case "2-–æ–π —É—Ä–æ–∫":
        bot.deleteMessage(chat.id, message_id),
          await bot.sendPhoto(chat.id, "images/2.jpg", {
            caption: `2-—ã–π —É—Ä–æ–∫\n\n–ù–∞—á–∞–ª–æ: 08:50 \n–ö–æ–Ω–µ—Ü: 09:35`,
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: `–ì–ª–∞–≤–Ω–æ–µ`,
                    callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                  },
                ],
              ],
            },
          });
        break;
      case "3-–∏–π —É—Ä–æ–∫":
        bot.deleteMessage(chat.id, message_id),
          await bot.sendPhoto(chat.id, "images/3.jpg", {
            caption: `3-–∏–π —É—Ä–æ–∫\n\n–ù–∞—á–∞–ª–æ: 09:40 \n–ö–æ–Ω–µ—Ü: 10:25`,
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: `–ì–ª–∞–≤–Ω–æ–µ`,
                    callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                  },
                ],
              ],
            },
          });
        break;
      case "4-—ã–π —É—Ä–æ–∫":
        bot.deleteMessage(chat.id, message_id),
          await bot.sendPhoto(chat.id, "images/4.jpg", {
            caption: `4-—ã–π —É—Ä–æ–∫\n\n–ù–∞—á–∞–ª–æ: 10:35 \n–ö–æ–Ω–µ—Ü: 11:20`,
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: `–ì–ª–∞–≤–Ω–æ–µ`,
                    callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                  },
                ],
              ],
            },
          });
        break;
      case "5-—ã–π —É—Ä–æ–∫":
        bot.deleteMessage(chat.id, message_id),
          await bot.sendPhoto(chat.id, "images/5.jpg", {
            caption: `5-—ã–π —É—Ä–æ–∫\n\n–ù–∞—á–∞–ª–æ: 11:30 \n–ö–æ–Ω–µ—Ü: 12:15`,
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: `–ì–ª–∞–≤–Ω–æ–µ`,
                    callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                  },
                ],
              ],
            },
          });
        break;
      case "6-–æ–π —É—Ä–æ–∫":
        bot.deleteMessage(chat.id, message_id),
          await bot.sendPhoto(chat.id, "images/6.jpg", {
            caption: `6-–æ–π —É—Ä–æ–∫\n\n–ù–∞—á–∞–ª–æ: 12:20 \n–ö–æ–Ω–µ—Ü: 13:05`,
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: `–ì–ª–∞–≤–Ω–æ–µ`,
                    callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                  },
                ],
              ],
            },
          });
        break;
      case "1-—ã–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞":
        bot.deleteMessage(chat.id, message_id),
          await bot.sendPhoto(chat.id, "images/1-s.jpg", {
            caption: `1-—ã–π —É—Ä–æ–∫\n\n–ù–∞—á–∞–ª–æ: 08:00 \n–ö–æ–Ω–µ—Ü: 08:30`,
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: `–ì–ª–∞–≤–Ω–æ–µ`,
                    callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                  },
                ],
              ],
            },
          });
        break;
      case "2-–æ–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞":
        bot.deleteMessage(chat.id, message_id),
          await bot.sendPhoto(chat.id, "images/2-s.jpg", {
            caption: `2-—ã–π —É—Ä–æ–∫\n\n–ù–∞—á–∞–ª–æ: 08:35 \n–ö–æ–Ω–µ—Ü: 09:15`,
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: `–ì–ª–∞–≤–Ω–æ–µ`,
                    callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                  },
                ],
              ],
            },
          });
        break;
      case "3-–∏–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞":
        bot.deleteMessage(chat.id, message_id),
          await bot.sendPhoto(chat.id, "images/3-s.jpg", {
            caption: `3-–∏–π —É—Ä–æ–∫\n\n–ù–∞—á–∞–ª–æ: 09:20 \n–ö–æ–Ω–µ—Ü: 10:00`,
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: `–ì–ª–∞–≤–Ω–æ–µ`,
                    callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                  },
                ],
              ],
            },
          });
        break;
      case "4-—ã–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞":
        bot.deleteMessage(chat.id, message_id),
          await bot.sendPhoto(chat.id, "images/4-s.jpg", {
            caption: `4-—ã–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞\n\n–ù–∞—á–∞–ª–æ: 10:05 \n–ö–æ–Ω–µ—Ü: 10:45`,
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: `–ì–ª–∞–≤–Ω–æ–µ`,
                    callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                  },
                ],
              ],
            },
          });
        break;
      case "5-—ã–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞":
        bot.deleteMessage(chat.id, message_id),
          await bot.sendPhoto(chat.id, "images/5-s.jpg", {
            caption: `5-—ã–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞\n\n–ù–∞—á–∞–ª–æ: 10:55 \n–ö–æ–Ω–µ—Ü: 11:35`,
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: `–ì–ª–∞–≤–Ω–æ–µ`,
                    callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                  },
                ],
              ],
            },
          });
        break;
      case "6-–æ–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞":
        bot.deleteMessage(chat.id, message_id),
          await bot.sendPhoto(chat.id, "images/6-s.jpg", {
            caption: `6-–æ–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞\n\n–ù–∞—á–∞–ª–æ: 11:40 \n–ö–æ–Ω–µ—Ü: 12:20`,
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: `–ì–ª–∞–≤–Ω–æ–µ`,
                    callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                  },
                ],
              ],
            },
          });
        break;
      case "7-–æ–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞":
        bot.deleteMessage(chat.id, message_id),
          await bot.sendPhoto(chat.id, "images/7-s.jpg", {
            caption: `7-–æ–π —É—Ä–æ–∫ –ø—è—Ç–Ω–∏—Ü–∞\n\n–ù–∞—á–∞–ª–æ: 12:25 \n–ö–æ–Ω–µ—Ü: 13:05`,
            parse_mode: "HTML",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: `–ì–ª–∞–≤–Ω–æ–µ`,
                    callback_data: "–ì–ª–∞–≤–Ω–æ–µ",
                  },
                ],
              ],
            },
          });
        break;
    }
  });
  bot.setMyCommands([
    { command: "/start", description: "–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ" },
    { command: "/info", description: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è" },
    { command: "/admins", description: "–ê–¥–º–∏–Ω—ã –¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã ! (—Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö)" },
    { command: "/cls", description: "–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç –ø–æ—Å–Ω–æ—Å—Ç—å—é !" },
  ]);
};
start();
